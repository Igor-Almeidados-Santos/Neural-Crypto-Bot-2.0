# .github/workflows/code-quality.yml
name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      run: |
        poetry install --no-interaction
        poetry run pip install bandit safety semgrep

    - name: Code Formatting Check (Black)
      run: |
        poetry run black --check --diff src tests
        echo "::notice title=Black::Code formatting check completed"

    - name: Import Sorting Check (isort)
      run: |
        poetry run isort --check-only --diff src tests
        echo "::notice title=isort::Import sorting check completed"

    - name: Linting (Ruff)
      run: |
        poetry run ruff check src tests --format github
        echo "::notice title=Ruff::Linting completed"

    - name: Type Checking (MyPy)
      run: |
        poetry run mypy src --show-error-codes --pretty
        echo "::notice title=MyPy::Type checking completed"

    - name: Complexity Analysis (Radon)
      run: |
        poetry run pip install radon
        poetry run radon cc src -a -nc
        poetry run radon mi src -nc
        echo "::notice title=Radon::Complexity analysis completed"

    - name: Docstring Coverage
      run: |
        poetry run pip install docstring-coverage
        poetry run docstring-coverage src --fail-under=70
        echo "::notice title=Docstrings::Docstring coverage check completed"

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install Dependencies
      run: poetry install --no-interaction

    - name: Security Scan (Bandit)
      run: |
        poetry run bandit -r src -f json -o bandit-report.json
        poetry run bandit -r src -f txt
      continue-on-error: true

    - name: Dependency Vulnerability Check (Safety)
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry run safety check -r requirements.txt --json --output safety-report.json
        poetry run safety check -r requirements.txt
      continue-on-error: true

    - name: Semgrep Security Scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep.sarif

    - name: Upload SARIF file to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Check for Dependency Updates
      run: |
        poetry show --outdated
        echo "::notice title=Dependencies::Dependency check completed"

    - name: License Compliance Check
      run: |
        poetry run pip install pip-licenses
        poetry run pip-licenses --format=json --output-file=licenses.json
        poetry run pip-licenses --format=table
        echo "::notice title=Licenses::License compliance check completed"

    - name: Generate Dependency Tree
      run: |
        poetry run pip install pipdeptree
        poetry run pipdeptree --json > dependency-tree.json
        poetry run pipdeptree
        echo "::notice title=Dependencies::Dependency tree generated"

    - name: Upload Dependency Reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          licenses.json
          dependency-tree.json

  code-metrics:
    name: Code Metrics & Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install Dependencies
      run: poetry install --no-interaction

    - name: Generate Code Metrics
      run: |
        # Install additional tools
        poetry run pip install radon xenon vulture

        # Cyclomatic Complexity
        echo "=== Cyclomatic Complexity ==="
        poetry run radon cc src -s -a --total-average

        # Maintainability Index
        echo "=== Maintainability Index ==="
        poetry run radon mi src -s

        # Halstead Metrics
        echo "=== Halstead Metrics ==="
        poetry run radon hal src

        # Dead Code Detection
        echo "=== Dead Code Detection ==="
        poetry run vulture src --min-confidence 90

        # Lines of Code
        echo "=== Lines of Code ==="
        find src -name "*.py" -exec wc -l {} + | tail -1

    - name: Quality Gates Check
      run: |
        # Check complexity thresholds
        COMPLEXITY=$(poetry run radon cc src -s -a --total-average | grep "Average complexity" | awk '{print $4}' | sed 's/(//')
        
        if (( $(echo "$COMPLEXITY > 10" | bc -l) )); then
          echo "::error title=Quality Gate::Average complexity ($COMPLEXITY) exceeds threshold (10)"
          exit 1
        else
          echo "::notice title=Quality Gate::Complexity check passed ($COMPLEXITY)"
        fi

        # Check maintainability
        LOW_MAINTAINABILITY=$(poetry run radon mi src -s | grep -c "C " || echo "0")
        
        if [ "$LOW_MAINTAINABILITY" -gt "5" ]; then
          echo "::error title=Quality Gate::Too many files with low maintainability ($LOW_MAINTAINABILITY)"
          exit 1
        else
          echo "::notice title=Quality Gate::Maintainability check passed"
        fi

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image for Scanning
      run: |
        docker build -f deployment/docker/Dockerfile.api -t ncb-api:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ncb-api:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: deployment/docker/Dockerfile.api
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install Dependencies
      run: poetry install --no-interaction

    - name: Performance Profiling
      run: |
        poetry run pip install py-spy memory-profiler line-profiler
        
        # Create simple performance test
        cat > perf_test.py << 'EOF'
        import time
        import sys
        sys.path.insert(0, 'src')

        def performance_test():
            # Simulate loading core modules
            try:
                from common.utils.config import Settings
                from common.infrastructure.logging.logger import get_logger
                print("✅ Core modules loaded successfully")
                return True
            except ImportError as e:
                print(f"❌ Import error: {e}")
                return False

        if __name__ == "__main__":
            start_time = time.time()
            result = performance_test()
            end_time = time.time()
            print(f"Performance test completed in {end_time - start_time:.2f} seconds")
            if not result:
                sys.exit(1)
        EOF
        
        # Run performance test
        poetry run python perf_test.py

    - name: Memory Usage Analysis
      run: |
        poetry run python -c "
        import psutil
        import os
        process = psutil.Process(os.getpid())
        memory_info = process.memory_info()
        print(f'Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB')
        "

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [static-analysis, security-analysis, dependency-analysis, code-metrics, docker-security]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate Quality Report
      run: |
        mkdir -p quality-report
        
        echo "# Code Quality Report" > quality-report/README.md
        echo "Generated on: $(date)" >> quality-report/README.md
        echo "" >> quality-report/README.md
        
        echo "## Job Results" >> quality-report/README.md
        echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> quality-report/README.md
        echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> quality-report/README.md
        echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }