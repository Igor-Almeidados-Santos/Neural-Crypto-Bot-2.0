#!/bin/bash
# scripts/docs/setup_documentation.sh - Script principal de configura√ß√£o
# Neural Crypto Bot 2.0 Documentation System
# Desenvolvido por Oasis - Sistema completo de documenta√ß√£o enterprise-grade

set -euo pipefail

# Carregar fun√ß√µes comuns
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh"

# ================================
# CONFIGURA√á√ïES PRINCIPAIS
# ================================

readonly SETUP_VERSION="2.0.0"
readonly SETUP_NAME="Neural Crypto Bot 2.0 Documentation Setup"

# Scripts de configura√ß√£o em ordem de execu√ß√£o
readonly SETUP_SCRIPTS=(
    "check_prerequisites.sh"
    "create_directories.sh"
    "install_dependencies.sh"
    "create_configuration.sh"
    "create_base_docs.sh"
    "setup_automation.sh"
    "create_assets.sh"
    "setup_github.sh"
    "create_templates.sh"
    "generate_content.sh"
    "setup_quality.sh"
    "validate.sh"
)

# ================================
# FUN√á√ïES DE INTERFACE
# ================================

show_welcome_banner() {
    clear
    display_main_banner
    
    echo -e "${CYAN}${BOLD}Bem-vindo ao Sistema de Configura√ß√£o da Documenta√ß√£o!${NC}\n"
    
    echo -e "${WHITE}Este assistente ir√° configurar um sistema de documenta√ß√£o de classe mundial para o${NC}"
    echo -e "${WHITE}Neural Crypto Bot 2.0, incluindo:${NC}\n"
    
    echo -e "${GREEN}üìÅ Estrutura completa de diret√≥rios organizados${NC}"
    echo -e "${GREEN}üé® Tema customizado com Material Design${NC}"
    echo -e "${GREEN}üîß Configura√ß√µes para desenvolvimento, staging e produ√ß√£o${NC}"
    echo -e "${GREEN}üìù Templates de documenta√ß√£o padronizados${NC}"
    echo -e "${GREEN}ü§ñ Automa√ß√£o de build e deploy${NC}"
    echo -e "${GREEN}‚úÖ Valida√ß√£o de qualidade autom√°tica${NC}"
    echo -e "${GREEN}üîó Integra√ß√£o com GitHub Pages${NC}"
    echo -e "${GREEN}üìä Analytics e feedback de usu√°rios${NC}\n"
    
    echo -e "${YELLOW}${BOLD}‚è±Ô∏è  Tempo estimado: 5-10 minutos${NC}"
    echo -e "${YELLOW}${BOLD}üì¶ Espa√ßo necess√°rio: ~500MB${NC}"
    echo -e "${YELLOW}${BOLD}üåê Conex√£o: Necess√°ria para downloads${NC}\n"
}

show_setup_options() {
    echo -e "${CYAN}${BOLD}Op√ß√µes de Configura√ß√£o:${NC}\n"
    
    echo -e "${WHITE}1. ${BOLD}Setup Completo${NC} - Configura√ß√£o completa autom√°tica (recomendado)"
    echo -e "${DIM}   Executa todos os scripts de configura√ß√£o em sequ√™ncia${NC}\n"
    
    echo -e "${WHITE}2. ${BOLD}Setup Interativo${NC} - Escolher quais componentes instalar"
    echo -e "${DIM}   Permite selecionar scripts espec√≠ficos para executar${NC}\n"
    
    echo -e "${WHITE}3. ${BOLD}Setup Personalizado${NC} - Configura√ß√£o avan√ßada"
    echo -e "${DIM}   Para usu√°rios experientes que querem controle total${NC}\n"
    
    echo -e "${WHITE}4. ${BOLD}Verificar Pr√©-requisitos${NC} - Apenas verificar sistema"
    echo -e "${DIM}   Testar se o sistema atende aos requisitos${NC}\n"
    
    echo -e "${WHITE}5. ${BOLD}Mostrar Ajuda${NC} - Informa√ß√µes detalhadas"
    echo -e "${DIM}   Documenta√ß√£o completa do sistema de setup${NC}\n"
    
    echo -e "${WHITE}6. ${BOLD}Sair${NC}"
    echo -e "${DIM}   Cancelar configura√ß√£o${NC}\n"
}

get_user_choice() {
    while true; do
        echo -ne "${CYAN}Escolha uma op√ß√£o [1-6]: ${NC}"
        read -r choice
        
        case $choice in
            1|2|3|4|5|6)
                echo "$choice"
                return 0
                ;;
            *)
                echo -e "${RED}Op√ß√£o inv√°lida. Por favor, escolha entre 1-6.${NC}"
                ;;
        esac
    done
}

confirm_action() {
    local message="$1"
    local default="${2:-n}"
    
    while true; do
        if [[ "$default" == "y" ]]; then
            echo -ne "${YELLOW}$message [Y/n]: ${NC}"
        else
            echo -ne "${YELLOW}$message [y/N]: ${NC}"
        fi
        
        read -r response
        response="${response:-$default}"
        
        case "$response" in
            [Yy]|[Yy][Ee][Ss])
                return 0
                ;;
            [Nn]|[Nn][Oo])
                return 1
                ;;
            *)
                echo -e "${RED}Por favor, responda sim (y) ou n√£o (n).${NC}"
                ;;
        esac
    done
}

# ================================
# FUN√á√ïES DE EXECU√á√ÉO
# ================================

run_complete_setup() {
    log_step "Executando Setup Completo"
    
    local total_scripts=${#SETUP_SCRIPTS[@]}
    local completed_scripts=0
    local failed_scripts=()
    local start_time=$(date +%s)
    
    echo -e "\n${CYAN}${BOLD}üìã Scripts a serem executados:${NC}"
    for script in "${SETUP_SCRIPTS[@]}"; do
        echo -e "${WHITE}  ‚Ä¢ $script${NC}"
    done
    echo ""
    
    if ! confirm_action "Continuar com o setup completo?" "y"; then
        log_info "Setup cancelado pelo usu√°rio"
        return 1
    fi
    
    # Executar cada script
    for script in "${SETUP_SCRIPTS[@]}"; do
        local script_path="$SCRIPT_DIR/$script"
        
        log_substep "Executando: $script"
        
        if [[ -f "$script_path" && -x "$script_path" ]]; then
            if "$script_path"; then
                ((completed_scripts++))
                log_success "‚úÖ $script conclu√≠do"
            else
                failed_scripts+=("$script")
                log_error "‚ùå $script falhou"
                
                # Perguntar se deve continuar
                if ! confirm_action "Continuar mesmo com falha em $script?" "n"; then
                    log_error "Setup interrompido pelo usu√°rio"
                    return 1
                fi
            fi
        else
            log_warning "Script n√£o encontrado ou n√£o execut√°vel: $script"
            failed_scripts+=("$script (n√£o encontrado)")
        fi
        
        show_progress $((completed_scripts + ${#failed_scripts[@]})) $total_scripts "Setup em progresso"
    done
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # Relat√≥rio final
    echo -e "\n${CYAN}${BOLD}üìä Relat√≥rio do Setup Completo:${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ Scripts executados: $completed_scripts/$total_scripts${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ Scripts com falha: ${#failed_scripts[@]}${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ Tempo total: ${duration}s${NC}"
    echo -e "${WHITE}‚îî‚îÄ‚îÄ Taxa de sucesso: $((completed_scripts * 100 / total_scripts))%${NC}"
    
    if [[ ${#failed_scripts[@]} -eq 0 ]]; then
        echo -e "\n${GREEN}${BOLD}üéâ SETUP COMPLETO COM SUCESSO!${NC}"
        show_completion_summary
        return 0
    else
        echo -e "\n${YELLOW}${BOLD}‚ö†Ô∏è SETUP CONCLU√çDO COM AVISOS${NC}"
        echo -e "${YELLOW}Scripts com falha:${NC}"
        for failed in "${failed_scripts[@]}"; do
            echo -e "${RED}  ‚Ä¢ $failed${NC}"
        done
        
        echo -e "\n${CYAN}Voc√™ pode tentar executar os scripts com falha individualmente:${NC}"
        for failed in "${failed_scripts[@]}"; do
            local script_name="${failed%% *}"
            echo -e "${WHITE}  ./scripts/docs/$script_name${NC}"
        done
        
        return 1
    fi
}

run_interactive_setup() {
    log_step "Executando Setup Interativo"
    
    echo -e "\n${CYAN}${BOLD}üìã Scripts Dispon√≠veis:${NC}\n"
    
    local script_choices=()
    local i=1
    
    for script in "${SETUP_SCRIPTS[@]}"; do
        local description=""
        case "$script" in
            "check_prerequisites.sh")
                description="Verificar pr√©-requisitos do sistema"
                ;;
            "create_directories.sh")
                description="Criar estrutura de diret√≥rios"
                ;;
            "install_dependencies.sh")
                description="Instalar depend√™ncias Python e Node.js"
                ;;
            "create_configuration.sh")
                description="Criar configura√ß√µes do MkDocs"
                ;;
            "create_base_docs.sh")
                description="Criar documentos base"
                ;;
            "setup_automation.sh")
                description="Configurar scripts de automa√ß√£o"
                ;;
            "create_assets.sh")
                description="Criar assets e recursos visuais"
                ;;
            "setup_github.sh")
                description="Configurar integra√ß√£o GitHub"
                ;;
            "create_templates.sh")
                description="Criar templates de documenta√ß√£o"
                ;;
            "generate_content.sh")
                description="Gerar conte√∫do de exemplo"
                ;;
            "setup_quality.sh")
                description="Configurar ferramentas de qualidade"
                ;;
            "validate.sh")
                description="Validar configura√ß√£o final"
                ;;
        esac
        
        echo -e "${WHITE}$i. ${BOLD}$script${NC}"
        echo -e "${DIM}   $description${NC}"
        echo ""
        
        script_choices+=("$script")
        ((i++))
    done
    
    echo -e "${WHITE}$i. ${BOLD}Executar todos selecionados${NC}"
    echo -e "${WHITE}$((i+1)). ${BOLD}Voltar ao menu principal${NC}\n"
    
    local selected_scripts=()
    
    while true; do
        echo -ne "${CYAN}Escolha scripts para executar (n√∫meros separados por espa√ßo, ou 'a' para todos): ${NC}"
        read -r selections
        
        if [[ "$selections" == "a" || "$selections" == "all" ]]; then
            selected_scripts=("${SETUP_SCRIPTS[@]}")
            break
        elif [[ "$selections" == "$i" ]]; then
            break
        elif [[ "$selections" == "$((i+1))" ]]; then
            return 0
        else
            # Processar sele√ß√µes num√©ricas
            selected_scripts=()
            for selection in $selections; do
                if [[ "$selection" =~ ^[0-9]+$ ]] && [[ $selection -ge 1 && $selection -le ${#SETUP_SCRIPTS[@]} ]]; then
                    selected_scripts+=("${script_choices[$((selection-1))]}")
                else
                    echo -e "${RED}Sele√ß√£o inv√°lida: $selection${NC}"
                    continue 2
                fi
            done
            break
        fi
    done
    
    if [[ ${#selected_scripts[@]} -eq 0 ]]; then
        log_info "Nenhum script selecionado"
        return 0
    fi
    
    echo -e "\n${CYAN}Scripts selecionados:${NC}"
    for script in "${selected_scripts[@]}"; do
        echo -e "${WHITE}  ‚Ä¢ $script${NC}"
    done
    
    if ! confirm_action "Executar scripts selecionados?" "y"; then
        return 0
    fi
    
    # Executar scripts selecionados
    local completed=0
    local failed=0
    
    for script in "${selected_scripts[@]}"; do
        local script_path="$SCRIPT_DIR/$script"
        
        log_substep "Executando: $script"
        
        if [[ -f "$script_path" && -x "$script_path" ]]; then
            if "$script_path"; then
                ((completed++))
                log_success "‚úÖ $script conclu√≠do"
            else
                ((failed++))
                log_error "‚ùå $script falhou"
            fi
        else
            ((failed++))
            log_error "Script n√£o encontrado: $script"
        fi
        
        show_progress $((completed + failed)) ${#selected_scripts[@]} "Executando scripts"
    done
    
    echo -e "\n${CYAN}${BOLD}üìä Resultado do Setup Interativo:${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ Scripts executados com sucesso: $completed${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ Scripts com falha: $failed${NC}"
    echo -e "${WHITE}‚îî‚îÄ‚îÄ Total processado: ${#selected_scripts[@]}${NC}"
    
    if [[ $failed -eq 0 ]]; then
        echo -e "\n${GREEN}${BOLD}‚úÖ Todos os scripts selecionados foram executados com sucesso!${NC}"
    else
        echo -e "\n${YELLOW}${BOLD}‚ö†Ô∏è Alguns scripts falharam. Verifique os logs para detalhes.${NC}"
    fi
    
    return 0
}

run_custom_setup() {
    log_step "Executando Setup Personalizado"
    
    echo -e "\n${CYAN}${BOLD}üîß Configura√ß√£o Avan√ßada${NC}\n"
    
    echo -e "${WHITE}Op√ß√µes dispon√≠veis:${NC}\n"
    echo -e "${WHITE}1. ${BOLD}Configurar ambiente de desenvolvimento${NC}"
    echo -e "${WHITE}2. ${BOLD}Configurar ambiente de produ√ß√£o${NC}"
    echo -e "${WHITE}3. ${BOLD}Configurar apenas documenta√ß√£o${NC}"
    echo -e "${WHITE}4. ${BOLD}Configurar apenas automa√ß√£o${NC}"
    echo -e "${WHITE}5. ${BOLD}Restaurar configura√ß√£o de backup${NC}"
    echo -e "${WHITE}6. ${BOLD}Configura√ß√£o m√≠nima (apenas essencial)${NC}"
    echo -e "${WHITE}7. ${BOLD}Voltar ao menu principal${NC}\n"
    
    local custom_choice
    while true; do
        echo -ne "${CYAN}Escolha uma op√ß√£o [1-7]: ${NC}"
        read -r custom_choice
        
        case $custom_choice in
            1)
                run_development_setup
                break
                ;;
            2)
                run_production_setup
                break
                ;;
            3)
                run_docs_only_setup
                break
                ;;
            4)
                run_automation_only_setup
                break
                ;;
            5)
                run_restore_setup
                break
                ;;
            6)
                run_minimal_setup
                break
                ;;
            7)
                return 0
                ;;
            *)
                echo -e "${RED}Op√ß√£o inv√°lida. Escolha entre 1-7.${NC}"
                ;;
        esac
    done
}

run_development_setup() {
    log_info "Configurando ambiente de desenvolvimento..."
    
    local dev_scripts=(
        "check_prerequisites.sh"
        "create_directories.sh"
        "install_dependencies.sh"
        "create_configuration.sh"
        "setup_automation.sh"
    )
    
    execute_script_list "${dev_scripts[@]}"
}

run_production_setup() {
    log_info "Configurando ambiente de produ√ß√£o..."
    
    local prod_scripts=(
        "check_prerequisites.sh"
        "create_directories.sh"
        "install_dependencies.sh"
        "create_configuration.sh"
        "create_base_docs.sh"
        "setup_github.sh"
        "setup_quality.sh"
        "validate.sh"
    )
    
    execute_script_list "${prod_scripts[@]}"
}

run_docs_only_setup() {
    log_info "Configurando apenas documenta√ß√£o..."
    
    local docs_scripts=(
        "create_directories.sh"
        "create_configuration.sh"
        "create_base_docs.sh"
        "create_templates.sh"
        "generate_content.sh"
    )
    
    execute_script_list "${docs_scripts[@]}"
}

run_automation_only_setup() {
    log_info "Configurando apenas automa√ß√£o..."
    
    local automation_scripts=(
        "setup_automation.sh"
        "setup_github.sh"
        "setup_quality.sh"
    )
    
    execute_script_list "${automation_scripts[@]}"
}

run_minimal_setup() {
    log_info "Configurando setup m√≠nimo..."
    
    local minimal_scripts=(
        "check_prerequisites.sh"
        "create_directories.sh"
        "install_dependencies.sh"
        "create_configuration.sh"
    )
    
    execute_script_list "${minimal_scripts[@]}"
}

run_restore_setup() {
    log_info "Fun√ß√£o de restaura√ß√£o ainda n√£o implementada"
    log_info "Esta funcionalidade ser√° adicionada em vers√µes futuras"
    return 0
}

execute_script_list() {
    local scripts=("$@")
    local completed=0
    local failed=0
    
    for script in "${scripts[@]}"; do
        local script_path="$SCRIPT_DIR/$script"
        
        if [[ -f "$script_path" && -x "$script_path" ]]; then
            if "$script_path"; then
                ((completed++))
            else
                ((failed++))
            fi
        else
            ((failed++))
        fi
    done
    
    echo -e "\n${CYAN}Resultado: $completed sucesso, $failed falhas${NC}"
    return $((failed > 0 ? 1 : 0))
}

run_prerequisites_check() {
    log_step "Verificando Pr√©-requisitos"
    
    local prereq_script="$SCRIPT_DIR/check_prerequisites.sh"
    
    if [[ -f "$prereq_script" && -x "$prereq_script" ]]; then
        "$prereq_script"
    else
        log_error "Script de pr√©-requisitos n√£o encontrado: $prereq_script"
        return 1
    fi
}

show_help() {
    clear
    echo -e "${PURPLE}${BOLD}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     NEURAL CRYPTO BOT 2.0 - SETUP HELP                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}\n"
    
    echo -e "${CYAN}${BOLD}üìñ Documenta√ß√£o do Sistema de Setup${NC}\n"
    
    echo -e "${WHITE}${BOLD}VIS√ÉO GERAL${NC}"
    echo -e "Este sistema configura uma documenta√ß√£o enterprise-grade usando MkDocs Material"
    echo -e "com recursos avan√ßados de navega√ß√£o, busca, versionamento e publica√ß√£o.\n"
    
    echo -e "${WHITE}${BOLD}COMPONENTES PRINCIPAIS${NC}"
    echo -e "${GREEN}‚Ä¢ Estrutura de Diret√≥rios:${NC} Organiza√ß√£o hier√°rquica padronizada"
    echo -e "${GREEN}‚Ä¢ Depend√™ncias:${NC} Python (Poetry), Node.js (NPM), ferramentas auxiliares"
    echo -e "${GREEN}‚Ä¢ Configura√ß√£o:${NC} MkDocs com Material theme personalizado"
    echo -e "${GREEN}‚Ä¢ Conte√∫do Base:${NC} Templates e documentos iniciais"
    echo -e "${GREEN}‚Ä¢ Automa√ß√£o:${NC} Scripts de build, deploy e valida√ß√£o"
    echo -e "${GREEN}‚Ä¢ Assets:${NC} Estilos, JavaScript, imagens e recursos visuais"
    echo -e "${GREEN}‚Ä¢ Integra√ß√£o:${NC} GitHub Pages, CI/CD, analytics"
    echo -e "${GREEN}‚Ä¢ Qualidade:${NC} Valida√ß√£o de markdown, links, acessibilidade\n"
    
    echo -e "${WHITE}${BOLD}REQUISITOS DO SISTEMA${NC}"
    echo -e "${CYAN}M√≠nimos:${NC}"
    echo -e "‚Ä¢ Python 3.11+ com pip"
    echo -e "‚Ä¢ Poetry (gerenciador de depend√™ncias Python)"
    echo -e "‚Ä¢ Git (controle de vers√£o)"
    echo -e "‚Ä¢ 4GB RAM, 10GB espa√ßo livre"
    echo -e "‚Ä¢ Conex√£o com internet est√°vel"
    echo -e "\n${CYAN}Recomendados:${NC}"
    echo -e "‚Ä¢ Node.js 18+ com npm (ferramentas auxiliares)"
    echo -e "‚Ä¢ Docker (para ambiente containerizado)"
    echo -e "‚Ä¢ 8GB+ RAM, 20GB+ espa√ßo livre\n"
    
    echo -e "${WHITE}${BOLD}MODOS DE INSTALA√á√ÉO${NC}"
    echo -e "${GREEN}1. Setup Completo:${NC} Instala tudo automaticamente (recomendado)"
    echo -e "${GREEN}2. Setup Interativo:${NC} Escolha componentes espec√≠ficos"
    echo -e "${GREEN}3. Setup Personalizado:${NC} Configura√ß√µes avan√ßadas por ambiente"
    echo -e "${GREEN}4. Verifica√ß√£o:${NC} Apenas testa pr√©-requisitos\n"
    
    echo -e "${WHITE}${BOLD}ESTRUTURA DE ARQUIVOS${NC}"
    echo -e "Ap√≥s a instala√ß√£o, voc√™ ter√°:"
    echo -e "${DIM}Neural-Crypto-Bot-2.0/${NC}"
    echo -e "${DIM}‚îú‚îÄ‚îÄ docs/                    # Documenta√ß√£o${NC}"
    echo -e "${DIM}‚îú‚îÄ‚îÄ mkdocs.yml              # Configura√ß√£o principal${NC}"
    echo -e "${DIM}‚îú‚îÄ‚îÄ scripts/docs/           # Scripts de automa√ß√£o${NC}"
    echo -e "${DIM}‚îú‚îÄ‚îÄ site/                   # Build da documenta√ß√£o${NC}"
    echo -e "${DIM}‚îî‚îÄ‚îÄ .docs-*                 # Arquivos de configura√ß√£o${NC}\n"
    
    echo -e "${WHITE}${BOLD}COMANDOS √öTEIS${NC}"
    echo -e "${CYAN}Desenvolvimento:${NC}"
    echo -e "‚Ä¢ ${BOLD}poetry run mkdocs serve${NC} - Servidor local"
    echo -e "‚Ä¢ ${BOLD}poetry run mkdocs build${NC} - Build est√°tico"
    echo -e "‚Ä¢ ${BOLD}./scripts/docs/validate.sh${NC} - Validar documenta√ß√£o"
    echo -e "\n${CYAN}Produ√ß√£o:${NC}"
    echo -e "‚Ä¢ ${BOLD}poetry run mkdocs gh-deploy${NC} - Deploy GitHub Pages"
    echo -e "‚Ä¢ ${BOLD}./scripts/docs/publish_docs.sh${NC} - Pipeline completo"
    echo -e "‚Ä¢ ${BOLD}./scripts/docs/version_docs.sh${NC} - Versionamento\n"
    
    echo -e "${WHITE}${BOLD}SOLU√á√ÉO DE PROBLEMAS${NC}"
    echo -e "${RED}Erro de permiss√£o:${NC} Execute com sudo ou ajuste permiss√µes"
    echo -e "${RED}Depend√™ncia n√£o encontrada:${NC} Execute check_prerequisites.sh"
    echo -e "${RED}Falha no build:${NC} Verifique sintaxe do mkdocs.yml"
    echo -e "${RED}Links quebrados:${NC} Execute validators/validate_links.sh\n"
    
    echo -e "${WHITE}${BOLD}SUPORTE${NC}"
    echo -e "‚Ä¢ ${CYAN}Logs:${NC} .docs-setup-logs/"
    echo -e "‚Ä¢ ${CYAN}Configura√ß√£o:${NC} .docs-config"
    echo -e "‚Ä¢ ${CYAN}Relat√≥rios:${NC} .docs-*-report.md"
    echo -e "‚Ä¢ ${CYAN}GitHub:${NC} https://github.com/neural-crypto-bot/neural-crypto-bot-2.0"
    echo -e "‚Ä¢ ${CYAN}Documenta√ß√£o:${NC} https://docs.neuralcryptobot.com\n"
    
    echo -ne "${YELLOW}Pressione ENTER para voltar ao menu principal...${NC}"
    read -r
}

show_completion_summary() {
    echo -e "\n${GREEN}${BOLD}üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!${NC}\n"
    
    echo -e "${CYAN}${BOLD}üìã O que foi configurado:${NC}"
    echo -e "${WHITE}‚úÖ Estrutura completa de diret√≥rios${NC}"
    echo -e "${WHITE}‚úÖ Depend√™ncias Python e Node.js instaladas${NC}"
    echo -e "${WHITE}‚úÖ Configura√ß√£o MkDocs Material personalizada${NC}"
    echo -e "${WHITE}‚úÖ Templates e documentos base criados${NC}"
    echo -e "${WHITE}‚úÖ Scripts de automa√ß√£o configurados${NC}"
    echo -e "${WHITE}‚úÖ Assets e recursos visuais${NC}"
    echo -e "${WHITE}‚úÖ Integra√ß√£o GitHub configurada${NC}"
    echo -e "${WHITE}‚úÖ Ferramentas de qualidade ativadas${NC}"
    echo -e "${WHITE}‚úÖ Valida√ß√£o de configura√ß√£o aprovada${NC}\n"
    
    echo -e "${CYAN}${BOLD}üöÄ Pr√≥ximos Passos:${NC}"
    echo -e "${WHITE}1. ${BOLD}Testar o servidor local:${NC}"
    echo -e "${DIM}   cd $(basename "$PROJECT_ROOT")${NC}"
    echo -e "${DIM}   poetry run mkdocs serve${NC}"
    echo -e "${DIM}   Abrir: http://localhost:8000${NC}\n"
    
    echo -e "${WHITE}2. ${BOLD}Personalizar conte√∫do:${NC}"
    echo -e "${DIM}   Editar arquivos em docs/01-getting-started/${NC}"
    echo -e "${DIM}   Adicionar logos em docs/assets/images/${NC}"
    echo -e "${DIM}   Personalizar cores em docs/stylesheets/${NC}\n"
    
    echo -e "${WHITE}3. ${BOLD}Configurar deploy:${NC}"
    echo -e "${DIM}   ./scripts/docs/setup_github.sh${NC}"
    echo -e "${DIM}   poetry run mkdocs gh-deploy${NC}\n"
    
    echo -e "${WHITE}4. ${BOLD}Desenvolver conte√∫do:${NC}"
    echo -e "${DIM}   Usar templates em docs/templates/${NC}"
    echo -e "${DIM}   Validar com ./scripts/docs/validate.sh${NC}\n"
    
    echo -e "${CYAN}${BOLD}üîó Links √öteis:${NC}"
    echo -e "${WHITE}‚Ä¢ Servidor local: ${BOLD}http://localhost:8000${NC}"
    echo -e "${WHITE}‚Ä¢ Documenta√ß√£o MkDocs: ${BOLD}https://www.mkdocs.org${NC}"
    echo -e "${WHITE}‚Ä¢ Material Theme: ${BOLD}https://squidfunk.github.io/mkdocs-material${NC}"
    echo -e "${WHITE}‚Ä¢ Reposit√≥rio: ${BOLD}https://github.com/neural-crypto-bot/neural-crypto-bot-2.0${NC}\n"
    
    echo -e "${GREEN}${BOLD}Documenta√ß√£o Neural Crypto Bot 2.0 est√° pronta! üöÄ${NC}"
}

# ================================
# FUN√á√ÉO PRINCIPAL
# ================================

main() {
    # Inicializar sistema
    init_docs_system
    
    # Mostrar banner de boas-vindas
    show_welcome_banner
    
    # Menu principal
    while true; do
        show_setup_options
        local choice
        choice=$(get_user_choice)
        
        case $choice in
            1)
                echo -e "\n${CYAN}${BOLD}üöÄ Iniciando Setup Completo...${NC}"
                if run_complete_setup; then
                    break
                else
                    echo -ne "\n${YELLOW}Pressione ENTER para voltar ao menu...${NC}"
                    read -r
                fi
                ;;
            2)
                echo -e "\n${CYAN}${BOLD}üéõÔ∏è Iniciando Setup Interativo...${NC}"
                run_interactive_setup
                echo -ne "\n${YELLOW}Pressione ENTER para voltar ao menu...${NC}"
                read -r
                ;;
            3)
                echo -e "\n${CYAN}${BOLD}üîß Iniciando Setup Personalizado...${NC}"
                run_custom_setup
                echo -ne "\n${YELLOW}Pressione ENTER para voltar ao menu...${NC}"
                read -r
                ;;
            4)
                echo -e "\n${CYAN}${BOLD}üîç Verificando Pr√©-requisitos...${NC}"
                run_prerequisites_check
                echo -ne "\n${YELLOW}Pressione ENTER para voltar ao menu...${NC}"
                read -r
                ;;
            5)
                show_help
                ;;
            6)
                echo -e "\n${CYAN}Saindo do setup. At√© logo! üëã${NC}"
                exit 0
                ;;
        esac
        
        clear
        display_main_banner
    done
    
    # Mostrar mensagem final
    echo -ne "\n${GREEN}Setup conclu√≠do! Pressione ENTER para sair...${NC}"
    read -r
    
    return 0
}

# ================================
# TRATAMENTO DE SINAIS
# ================================

cleanup_on_exit() {
    echo -e "\n\n${YELLOW}Setup interrompido pelo usu√°rio.${NC}"
    echo -e "${YELLOW}Arquivos tempor√°rios sendo limpos...${NC}"
    
    # Limpar arquivos tempor√°rios se necess√°rio
    rm -f /tmp/docs-setup-* 2>/dev/null || true
    
    echo -e "${GREEN}Limpeza conclu√≠da. At√© logo! üëã${NC}"
    exit 0
}

trap cleanup_on_exit INT TERM

# ================================
# EXECU√á√ÉO
# ================================

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi