# Dockerfile.api
FROM python:3.11-slim as python-base

# Configuração de ambiente não interativo
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# Instalação de dependências do sistema
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    build-essential \
    curl \
    libopenblas-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Instalação do Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

# Cópia dos arquivos de configuração do Poetry
WORKDIR $PYSETUP_PATH
COPY pyproject.toml poetry.lock* ./

# Instalação das dependências do projeto
RUN poetry install --without dev --no-root

# Imagem final
FROM python:3.11-slim as production

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$VENV_PATH/bin:$PATH"

# Instalação de dependências mínimas do sistema
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
    libpq5 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Cópia do ambiente virtual da etapa anterior
COPY --from=python-base $VENV_PATH $VENV_PATH

# Cópia do código fonte
WORKDIR /app
COPY . .

# Exposição da porta da API
EXPOSE 8000

# Configuração de variáveis de ambiente
ENV PYTHONPATH=/app
ENV ENVIRONMENT=production

# Comando para iniciar a API
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
