# deployment/kubernetes/monitoring-deployment.yaml
# Kubernetes deployment para Monitoring Stack do Neural Crypto Bot 2.0

---
apiVersion: v1
kind: Namespace
metadata:
  name: neural-crypto-bot
  labels:
    name: neural-crypto-bot
    purpose: trading-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neural-crypto-bot
  namespace: neural-crypto-bot
  labels:
    app: neural-crypto-bot

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: neural-crypto-bot
  labels:
    app: neural-crypto-bot
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: neural-crypto-bot
  labels:
    app: neural-crypto-bot
subjects:
- kind: ServiceAccount
  name: neural-crypto-bot
  namespace: neural-crypto-bot
roleRef:
  kind: ClusterRole
  name: neural-crypto-bot
  apiGroup: rbac.authorization.k8s.io

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: neural-crypto-bot
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: neural-crypto-bot
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        ports:
        - name: web
          containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
        - '--storage.tsdb.retention.time=15d'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        - '--storage.tsdb.max-block-duration=2h'
        - '--storage.tsdb.min-block-duration=2h'
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 5
          timeoutSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: neural-crypto-bot
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: web
  selector:
    app: prometheus

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: neural-crypto-bot
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'neural-crypto-bot'
        environment: 'ENVIRONMENT'

    rule_files:
    - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    scrape_configs:
    # Prometheus itself
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    # Neural Crypto Bot Services
    - job_name: 'neural-crypto-bot-api'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - neural-crypto-bot
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: api
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    - job_name: 'neural-crypto-bot-collector'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - neural-crypto-bot
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: collector
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    - job_name: 'neural-crypto-bot-execution'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - neural-crypto-bot
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: execution
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    - job_name: 'neural-crypto-bot-training'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - neural-crypto-bot
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: training
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    # Kubernetes cluster monitoring
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

  rules.yml: |
    groups:
    - name: neural-crypto-bot.rules
      rules:
      # Trading Performance Alerts
      - alert: HighSlippage
        expr: trading_slippage_percent > 1.0
        for: 5m
        labels:
          severity: warning
          service: execution
        annotations:
          summary: "High slippage detected"
          description: "Trading slippage is {{ $value }}% for the last 5 minutes"

      - alert: DailyLossLimitReached
        expr: trading_daily_pnl_percent < -2.0
        for: 1m
        labels:
          severity: critical
          service: execution
        annotations:
          summary: "Daily loss limit reached"
          description: "Daily P&L is {{ $value }}%, circuit breaker should activate"

      - alert: LowExecutionFillRate
        expr: trading_fill_rate_percent < 90
        for: 10m
        labels:
          severity: warning
          service: execution
        annotations:
          summary: "Low order fill rate"
          description: "Order fill rate is {{ $value }}% for the last 10 minutes"

      # System Performance Alerts
      - alert: HighAPILatency
        expr: http_request_duration_seconds{quantile="0.95"} > 1.0
        for: 5m
        labels:
          severity: warning
          service: api
        annotations:
          summary: "High API latency"
          description: "95th percentile latency is {{ $value }}s"

      - alert: HighMemoryUsage
        expr: (container_memory_working_set_bytes / container_spec_memory_limit_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value | humanizePercentage }}"

      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently"

      # Data Collection Alerts
      - alert: WebSocketConnectionFailure
        expr: websocket_connections_active == 0
        for: 2m
        labels:
          severity: critical
          service: collector
        annotations:
          summary: "WebSocket connections down"
          description: "No active WebSocket connections for data collection"

      - alert: DataCollectionLag
        expr: data_collection_lag_seconds > 60
        for: 5m
        labels:
          severity: warning
          service: collector
        annotations:
          summary: "Data collection lag"
          description: "Data collection lag is {{ $value }}s"

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: neural-crypto-bot
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - name: web
          containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neural-crypto-bot-secrets
              key: grafana-admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        livenessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 5
          timeoutSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: neural-crypto-bot
  labels:
    app: grafana
    component: monitoring
spec:
  type: LoadBalancer
  ports:
  - name: web
    port: 3000
    targetPort: web
  selector:
    app: grafana

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: neural-crypto-bot
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'neural-crypto-bot'
      orgId: 1
      folder: 'Neural Crypto Bot'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: neural-crypto-bot
  labels:
    app: prometheus
    component: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: neural-crypto-bot
  labels:
    app: grafana
    component: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: neural-crypto-bot
  labels:
    app: neural-crypto-bot
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: neural-crypto-bot
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        ports:
        - name: web
          containerPort: 9093
        args:
        - '--config.file=/etc/alertmanager/alertmanager.yml'
        - '--storage.path=/alertmanager'
        - '--web.external-url=http://localhost:9093'
        - '--cluster.listen-address=0.0.0.0:9094'
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        - name: alertmanager-storage
          mountPath: /alertmanager
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 5
          timeoutSeconds: 5
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: neural-crypto-bot
  labels:
    app: alertmanager
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9093
    targetPort: web
  selector:
    app: alertmanager

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: neural-crypto-bot
  labels:
    app: alertmanager
    component: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alerts@neuralcryptobot.com'

    route:
      group_by: ['alertname', 'severity']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          service: execution
        receiver: 'trading-alerts'

    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://webhook:5001/webhook'

    - name: 'critical-alerts'
      email_configs:
      - to: 'admin@neuralcryptobot.com'
        subject: '[CRITICAL] Neural Crypto Bot Alert'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#alerts-critical'
        title: '[CRITICAL] Neural Crypto Bot Alert'
        text: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

    - name: 'trading-alerts'
      email_configs:
      - to: 'trading@neuralcryptobot.com'
        subject: '[TRADING] Neural Crypto Bot Alert'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'instance']