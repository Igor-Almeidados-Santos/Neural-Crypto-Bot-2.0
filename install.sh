#!/bin/bash

# Aborta o script imediatamente se um comando falhar.
set -e

# Fun√ß√£o para checar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o de log
log_info() {
    echo "INFO: $1"
}

log_error() {
    echo "ERROR: $1" >&2
    exit 1
}

# --- Verifica√ß√£o de Pr√©-requisitos ---
log_info "Verificando pr√©-requisitos essenciais..."

if ! command_exists git; then
    log_error "Git n√£o est√° instalado. Por favor, instale o Git para continuar."
fi

if ! command_exists docker; then
    log_error "Docker n√£o est√° instalado. Por favor, instale o Docker para continuar."
fi
if ! docker-compose --version >/dev/null 2>&1; then
    log_error "Docker Compose n√£o est√° instalado ou n√£o est√° no PATH. Por favor, instale-o."
fi

if ! command_exists poetry; then
    log_error "Poetry n√£o est√° instalado. Instale-o com: 'curl -sSL https://install.python-poetry.org | python3 -'"
fi

log_info "‚úÖ Todos os pr√©-requisitos foram encontrados."

# --- Instala√ß√£o ---
log_info "Iniciando a instala√ß√£o via Makefile..."
if ! make install; then
    log_error "A instala√ß√£o das depend√™ncias via 'make install' falhou."
fi

# --- Configura√ß√£o do Ambiente ---
if [ ! -f .env ]; then
    log_info "Arquivo .env n√£o encontrado. Copiando de .env.example..."
    if [ -f .env.example ]; then
        cp .env.example .env
        log_info "‚úÖ Arquivo .env criado. Por favor, edite-o com suas chaves de API e configura√ß√µes."
    else
        log_error "Arquivo .env.example n√£o encontrado. N√£o foi poss√≠vel criar o arquivo .env."
    fi
fi

echo ""
log_info "üéâ Instala√ß√£o conclu√≠da com sucesso!"
log_info "Para iniciar os servi√ßos em background, use: make docker-up"
log_info "Para iniciar a API em modo de desenvolvimento, use: make run-api"
log_info "Para ver todos os comandos dispon√≠veis, use: make help"